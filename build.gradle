plugins {
    id "io.spring.dependency-management" version '1.0.11.RELEASE'
    id 'org.springframework.boot' version '2.5.6'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'java'

    id 'jacoco'
    id "org.sonarqube" version "3.3"

    id 'com.google.cloud.tools.jib' version '3.1.4'
}

group = 'com.prgrms'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    asciidoctorExtensions
    compileOnly {
        extendsFrom annotationProcessor
    }
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'mysql:mysql-connector-java'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    //jwt 의존성
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'


    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // Rest Assured
    testImplementation 'io.rest-assured:rest-assured:4.4.0'

    // rest-docs
    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    // for swagger
    implementation 'io.springfox:springfox-boot-starter:3.0.0'


    implementation "com.querydsl:querydsl-jpa"
    implementation "com.querydsl:querydsl-core"
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa"
    // querydsl JPAAnnotationProcessor 사용 지정
    annotationProcessor "jakarta.persistence:jakarta.persistence-api:2.2.3"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api:1.3.5"
}

sonarqube {
    properties {
        property "sonar.projectKey", "price-offer_offer-be"
        property "sonar.organization", "price-offer-sonar-cloud-key"
        property "sonar.host.url", "https://sonarcloud.io"
        property 'sonar.coverage.jacoco.xmlReportPaths', "$buildDir/jacoco.xml"
    }
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

tasks.named('asciidoctor') {
    configurations 'asciidoctorExtensions'
    sources {
        include("**/index.adoc", "**/common/*.adoc")
    }
    baseDirFollowsSourceFile()
    inputs.dir snippetsDir

    dependsOn test
}

asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

task createDocument(type: Copy) {
    dependsOn asciidoctor

    from file("build/docs/asciidoc")
    into file("src/main/resources/static")
}

task displaceDocument(type: Copy) {
    dependsOn asciidoctor

    from ("${asciidoctor.outputDir}")
    into ("build/resources/main/static")
}

bootJar {
    dependsOn createDocument
    dependsOn displaceDocument
}

//processResources.dependsOn('copySecret')
//
//task copySecret(type: Copy) {
//    from '../offer-be/be-submodule'
//    into 'src/main/resources'
//}


// querydsl 적용
def generated = 'src/main/generated'
sourceSets {
    main.java.srcDirs += [generated]
}

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file(generated)
}

clean.doLast {
    file(generated).deleteDir()
}

//// Jacoco 플러그인 설정
//jacoco {
//    toolVersion = '0.8.7'
//    // reportsDir = ${project.reporting.baseDir}/jacoco - 따로 설정해 주지 않을 경우 기본 경로
//}

// jacocoTestReport 설정
jacocoTestReport {
    reports {
        html.enabled true // 로컬에서 확인용으로 html 리포트 파일 생성
//        html.destination file("$buildDir/reports/test/jacocoTestReport.html")

        xml.enabled true  // SonarCloud로 전송하기 위해 XML 리포트 생성
        xml.destination file("$buildDir/jacoco.xml")

        csv.enabled false // csv는 생성하지 않음
    }

    def Qdomains = []
    for (qPattern in '**/QA'..'**/QZ') {
        Qdomains.add(qPattern + '*')
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            '**/*Application*',
                            '**/*Request*',
                            '**/*Response*',
                            '**/*OAuthClient*',
                            '**/*Interceptor*',
                            '**/*Exception*',
                    ] + Qdomains)
                })
        )
    }

    // 코드 커버리지 기준을 만족해야지 build 성공
    finalizedBy 'jacocoTestCoverageVerification'
}

//  jacocoTestCoverageVerification 설정
jacocoTestCoverageVerification {
    def Qdomains = []
    for (qPattern in '*.QA'..'*.QZ') {
        Qdomains.add(qPattern + '*')
    }

    violationRules {
        rule {
            enabled = true // 이 rule을 적용할 것이다.
            element = 'BUNDLE' // BUNDLE 단위로

//            // TODO: 브랜치 커버리지 최소 50%
//            limit {
//                counter = 'BRANCH'
//                value = 'COVEREDRATIO'
//                minimum = 0.00
//            }

//            // TODO: 라인 커버리지 최소한 80%
//            limit {
//                counter = 'LINE'
//                value = 'COVEREDRATIO'
//                minimum = 0.00
//            }

            // 커버리지 체크를 제외할 클래스들
            excludes = [
                    '**.*Application*',
                    '**.*Request*',
                    '**.*Response*',
                    '**.*OAuthClient*',
                    '**.*Interceptor*',
                    '**.*Exception*',
            ] + Qdomains
        }
    }
}

jib {
    from {
        image = 'adoptopenjdk/openjdk11:alpine-jre'
    }
//    to {  // docker image 빌드 후 push할 레포지토리 경로
//        image = 'goharrm/ci-test'  // url이 없으면 default로 docker hub에 push
//        tags = ['1.0']
//    }
    container {
        entrypoint = ['java', '-jar', 'offer-0.0.1-SNAPSHOT.jar']
        // mainClass = 'com.test.StartApplication'
        jvmFlags = [' -Xms512m', '-Xmx512m', '-Xdebug', '-XshowSettings: vm', '-XX: +UnlockExperimentalVMOptions', '-XX:+UseContainerSupport']
        ports = ['7070']  // 컨테이너 포트

        environment = [SPRING_OUTPUT_ANSI_ENABLED: "ALWAYS"]
        labels = [Iversion: project.version, name: project.name, group: project.group]

//        creationTime = 'USE CURRENT TIMESTAMP'  // 컨테이너 빌드시 시간
        format = 'Docker'  // 컨테이너가 도커 포맷임
    }
    extraDirectories {
        paths { // 특정 path에서 특정 file을 가져오기 위해 명시
            path {
                from = file('build/libs')  // build/libs 아래 생성된 jar 파일을 가져와서 위 entrypoint에서 실행되도록 함
            }
        }
    }
}
